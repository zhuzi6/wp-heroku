{"version":3,"file":"240.js","mappings":"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","sources":["webpack://sakurairo-scripts/./node_modules/promise-worker/index.js","webpack://sakurairo-scripts/./node_modules/palette/dist/util.js","webpack://sakurairo-scripts/./src/sakura-app/theme-color/index.ts"],"sourcesContent":["'use strict'\n\nvar messageIds = 0\n\nfunction onMessage (self, e) {\n  var message = e.data\n  if (!Array.isArray(message) || message.length < 2) {\n    // Ignore - this message is not for us.\n    return\n  }\n  var messageId = message[0]\n  var error = message[1]\n  var result = message[2]\n\n  var callback = self._callbacks[messageId]\n\n  if (!callback) {\n    // Ignore - user might have created multiple PromiseWorkers.\n    // This message is not for us.\n    return\n  }\n\n  delete self._callbacks[messageId]\n  callback(error, result)\n}\n\nfunction PromiseWorker (worker) {\n  var self = this\n  self._worker = worker\n  self._callbacks = {}\n\n  worker.addEventListener('message', function (e) {\n    onMessage(self, e)\n  })\n}\n\nPromiseWorker.prototype.postMessage = function (userMessage) {\n  var self = this\n  var messageId = messageIds++\n\n  var messageToSend = [messageId, userMessage]\n\n  return new Promise(function (resolve, reject) {\n    self._callbacks[messageId] = function (error, result) {\n      if (error) {\n        return reject(new Error(error.message))\n      }\n      resolve(result)\n    }\n\n    /* istanbul ignore if */\n    if (typeof self._worker.controller !== 'undefined') {\n      // service worker, use MessageChannels because e.source is broken in Chrome < 51:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=543198\n      var channel = new MessageChannel()\n      channel.port1.onmessage = function (e) {\n        onMessage(self, e)\n      }\n      self._worker.controller.postMessage(messageToSend, [channel.port2])\n    } else {\n      // web worker\n      self._worker.postMessage(messageToSend)\n    }\n  })\n}\n\nmodule.exports = PromiseWorker\n","export function awaitImage(imgElement) {\n    return new Promise((resolve, reject) => {\n        imgElement.addEventListener('load', () => {\n            resolve();\n        });\n        imgElement.addEventListener('error', () => {\n            reject();\n        });\n    });\n}\nexport function readImage(imgSource) {\n    return _readImage(_prepare2DContext, imgSource);\n}\nexport function readImageAsync(imgSource) {\n    return _readImage(_prepare2DContextAsync, imgSource);\n}\nfunction _readImage(prepareCtx, imgSource) {\n    const { naturalWidth, naturalHeight } = imgSource;\n    const ctx = prepareCtx(naturalWidth, naturalHeight);\n    ctx?.drawImage(imgSource, 0, 0, naturalWidth, naturalHeight);\n    return ctx?.getImageData(0, 0, naturalWidth, naturalHeight);\n}\n/**\n * 降采样后读取图片\n * @param imgSource\n * @param maxSample\n * @returns\n */\nexport function readImageDownsampling(imgSource, maxSample) {\n    return _readImageDownsampling(_prepare2DContext, imgSource, maxSample);\n}\nexport function readImageDownsamplingAsync(imgSource, maxSample) {\n    return _readImageDownsampling(_prepare2DContextAsync, imgSource, maxSample);\n}\nfunction _readImageDownsampling(prepareCtx, imgSource, maxSample) {\n    const { naturalWidth: width, naturalHeight: height } = imgSource;\n    const scale = width * height / maxSample;\n    if (scale > 1) {\n        const n_width = width / Math.sqrt(scale);\n        const n_height = height / Math.sqrt(scale);\n        const ctx = prepareCtx(n_width, n_height);\n        ctx?.drawImage(imgSource, 0, 0, n_width, n_height);\n        return ctx?.getImageData(0, 0, n_width, n_height);\n    }\n    else {\n        const ctx = prepareCtx(width, height);\n        ctx?.drawImage(imgSource, 0, 0);\n        return ctx?.getImageData(0, 0, width, height);\n    }\n}\nfunction _prepare2DContext(width, height) {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.height = height;\n    canvas.width = width;\n    return ctx;\n}\n/**\n * Use OffscreenCanvas\n */\nfunction _prepare2DContextAsync(width, height) {\n    const canvas = new OffscreenCanvas(width, height);\n    const ctx = canvas.getContext('2d');\n    return ctx;\n}\n/**\n * 从@type {Uint8ClampedArray} 中读取，每四个元素合并到一个数组元素中\n * @param img 要处理的图像矩阵\n * @returns\n */\nexport function toPixel(img) {\n    const { data } = img;\n    const array = new Array(data.length / 4);\n    for (let i = 0; i < data.length; i += 4) {\n        array[i / 4] = [data[i], data[i + 1], data[i + 2], data[i + 3]];\n    }\n    return array;\n}\n/**\n * 返回两个四维坐标间的欧几里得距离\n * @param a\n * @param b\n * @returns\n */\nexport function euclidean_distance(a, b) {\n    const r = a[0] - b[0];\n    const g = a[1] - b[1];\n    const _b = a[2] - b[2];\n    const _a = a[3] - b[3];\n    return Math.sqrt(r * r\n        + g * g\n        + _b * _b\n        + _a * _a);\n    /* return Math.sqrt(\n        Math.pow(a[0] - b[0], 2)\n        + Math.pow(a[1] - b[1], 2)\n        + Math.pow(a[2] - b[2], 2)\n        + Math.pow(a[3] - b[3], 2)\n    ) */\n}\n/**\n * 以数组形式返回三个数字中的最大值与最小值\n * @param param0 一个包含三个数字的数组\n * @returns [max,min]\n */\nfunction max_min_of_three([a, b, c]) {\n    if (a > b) {\n        if (b > c) {\n            //abc\n            return [a, c];\n        }\n        else {\n            if (a > c) {\n                //acb\n                return [a, b];\n            }\n            else {\n                //cab\n                return [c, b];\n            }\n        }\n    }\n    else {\n        //a<b\n        if (b > c) {\n            if (c > a) {\n                //bca\n                return [b, a];\n            }\n            else {\n                //bac\n                return [b, c];\n            }\n        }\n        else {\n            //cba\n            return [c, a];\n        }\n    }\n}\nexport function normalizeRGBA(rgba) {\n    //@ts-ignore\n    return rgba.map(v => v / 255);\n}\nexport function rgbaToHSLA(rgba) {\n    let h, s;\n    //@ts-ignore\n    const [max, min] = max_min_of_three(rgba);\n    const diff = max - min;\n    const light_2x = max + min;\n    //h\n    if (diff == 0) {\n        h = 0;\n        s = 0;\n    }\n    else {\n        if (max == rgba[0]) {\n            const temp_h = 60 * (rgba[1] - rgba[2]) / diff;\n            if (temp_h < 0) {\n                h = temp_h + 360;\n            }\n            else {\n                h = temp_h;\n            }\n        }\n        else if (max == rgba[1]) {\n            h = 60 * (rgba[2] - rgba[0]) / diff + 120;\n        }\n        else {\n            h = 60 * (rgba[0] - rgba[1]) / diff + 240;\n        }\n        if (light_2x == 0) {\n            s = 0;\n        }\n        else if (light_2x <= 1) {\n            s = diff / light_2x;\n        }\n        else {\n            s = diff / (2 - light_2x);\n        }\n    }\n    return [h, s, light_2x / 2, rgba[3]];\n}\nfunction adjustAngleIn2Pi(angle) {\n    if (angle < 0)\n        return angle + 360;\n    let temp = angle;\n    while (temp >= 360) {\n        temp = angle - 360;\n    }\n    return temp;\n}\nexport const sortHSL = (sort = [0, 1, 2, 3]) => (a, b) => {\n    let result;\n    for (const s of sort) {\n        result = a[s] - b[s];\n        if (result != 0) {\n            return result;\n        }\n    }\n    //其实是赋了值的，但是ts没猜出来\n    //@ts-ignore\n    return result;\n};\nexport const hslaCSSText = ([h, s, l, a]) => `hsla(${h}deg,${s * 100}%,${l * 100}%,${a})`;\nexport const rgbaCSSText = (pixel) => `rgba(${pixel.map(v => Math.floor(v)).join(',')})`;\n/* export class RGBAArray extends Uint8ClampedArray {\n    pixel(pixel_index: number) {\n        return [pixel_index * 4, pixel_index * 4 + 1, pixel_index * 4 + 2, pixel_index * 4 + 3]\n    }\n    r(pixel_index: number) {\n        return pixel_index * 4\n    }\n    g(pixel_index: number) {\n        return pixel_index * 4 + 1\n    }\n    b(pixel_index: number) {\n        return pixel_index * 4 + 2\n    }\n    a(pixel_index: number) {\n        return pixel_index * 4 + 3\n    }\n} */ \n","import { awaitImage, readImageDownsampling, rgbaCSSText, } from 'palette';\nimport PromiseWorker from 'promise-worker';\nlet worker = new PromiseWorker(new Worker(new URL('./worker.ts', import.meta.url)));\nexport async function updateThemeSkin(coverBGUrl) {\n    const imgElement = document.createElement('img');\n    imgElement.src = coverBGUrl;\n    await awaitImage(imgElement);\n    const data = readImageDownsampling(imgElement, 10000);\n    const result = await worker.postMessage({\n        k: 3,\n        iteration: 20,\n        img: data\n    });\n    const { label, cluster_center } = result;\n    const max = [...label].sort((a, b) => b - a)[0];\n    const index = label.findIndex(value => value == max);\n    _updateThemeSkin(cluster_center[index]);\n    //console.log(result)\n}\nfunction _updateThemeSkin(color) {\n    //TODO: 暗色模式支持\n    const metaLight = document.querySelector('meta[name=theme-color][media=\"(prefers-color-scheme: light)\"]');\n    /*     const metaDark = document.querySelector<HTMLMetaElement>('meta[name=theme-color][media=\"(prefers-color-scheme: dark)\"]')\n        const [h,s,l,a] = rgbaToHSLA(color) */\n    metaLight && (metaLight.content = rgbaCSSText(color));\n    /*     metaDark && (metaDark.content = hslaCSSText([h,s,l,a]))\n     */ \n}\nexport function init() {\n    document.addEventListener('coverBG_change', (({ detail: coverBGUrl }) => updateThemeSkin(coverBGUrl)));\n}\n"],"names":["messageIds","onMessage","self","e","message","data","Array","isArray","length","messageId","error","result","callback","_callbacks","PromiseWorker","worker","this","_worker","addEventListener","prototype","postMessage","userMessage","messageToSend","Promise","resolve","reject","Error","controller","channel","MessageChannel","port1","onmessage","port2","module","exports","_readImageDownsampling","prepareCtx","imgSource","maxSample","naturalWidth","width","naturalHeight","height","scale","n_width","Math","sqrt","n_height","ctx","drawImage","getImageData","_prepare2DContext","canvas","document","createElement","getContext","Worker","URL","async","updateThemeSkin","coverBGUrl","imgElement","src","awaitImage","k","iteration","img","label","cluster_center","max","sort","a","b","color","metaLight","querySelector","content","pixel","map","v","floor","join","_updateThemeSkin","findIndex","value","init","detail"],"sourceRoot":""}